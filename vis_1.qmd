---
Title: "ggplot Visualization"
author: "Namig Abbasov"
Format: html
Editor: visual
---

# Visualization with Ggplot in R

Dr. Namig Abbasov

## Getting Started

### How to Install R and R Studio

We will use R statistical software within RStudio. You will need to install both software. R is an open-source language and environment for statistical computing and graphics. For additional details, please refer to the [R project homepage](https://www.r-project.org/). RStudio is an integrated development environment (IDE) specifically designed for the R programming language. It provides a user-friendly ***interface*** for writing, running, and managing R code. For additional details, please refer to the [Posit's homepage](https://posit.co/). RStudio company rebranded itself as Posit. Both R and RStudio are free. RStudio is widely used in the R community for statistical modeling, data visualization, and scientific research. It is widely used for replication files of academic journal articles. For instance, you can download replication files in R file formats from https://dataverse.harvard.edu/.

Key features of RStudio:

1.  **Script Editor/Source:** RStudio includes a script editor, making it easier to write, edit, and save R codes for future use.

2.  **Console:** The R console allows you to interactively execute R code and see the results immediately. You can use it for testing code snippets and exploring data interactively.

3.  **EnvironmentWorkspace/History:** In this window, you can manage your R workspace, enviroment, and command history within RStudio. It is a good practice to run rm(list = ls()) code to empty your environment before starting to work on your R file.

4.  **File/Plot/Package Management:** In this window, you can work with R scripts, data files, and other resources directly. Plot pane allows to view and interact with plots and visualizations generated by R. From packages section, you can install, update, and loade packages. It also helps you keep track of which packages are currently active in your session.

To install R and RStudio and start using them, follow these steps:

#### Install R:

1.  Go to the [R Project website's download page](https://cran.rstudio.com/).
    -   For Macs, https://cran.r-project.org/bin/macosx/. Make sure whether your laptop is Apple silicon (M1/M2) Macs or Intel (chips) Macs. You can check it from "About This Mac" on your Mac.

    -   For Windows, https://cran.r-project.org/bin/windows/base/ or https://cran.r-project.org/

    -   For other operating systems, please, check out: https://cran.r-project.org/
2.  Download the R installer appropriate for your operating system and run the installer, following the installation instructions.

#### Install R Studio:

1.  Go to the [RStudio download page](https://www.rstudio.com/products/rstudio/download/)
2.  Scroll down and you will see "All Installers and Tarballs" Heading
3.  Choose the RStudio Desktop edition that is suitable for your operating system (Windows, macOS, or Linux).
4.  Download and run the RStudio installer and follow the installation instructions.
5.  Start RStudio: you can open it by clicking on the RStudio icon in your applications.

### Set Working Directory

You can set the working directory using the **`setwd()`** function. The working directory is the folder in your file system where R will look for and save files by default. Alternatively, you can set your directory either from RStudio menu or creating R projects.

1.  **Using RStudio:**

    -   Go to the "Session" menu at the top of the RStudio interface.
    -   Select "Set Working Directory."
    -   Choose "To Source File Location" to set the working directory to the location of the currently open R script.
    -   Or choose "Choose Directory" to manually browse and select the desired directory.
    -   Copy the working directory from R Consule and paste it to your R sript/source.

2.  **Creating R Projects (Recommended):**

    It is a good practice to create R projects for your work. When you create an R project, the working directory is automatically set to the project's directory. To create an R project:

    -   Go to the "File" menu in RStudio.
    -   Select "New Project."
    -   Choose a project type ("New Directory" or "Existing Directory") and specify the project directory.
    -   Click "Create Project." RStudio will open the project and set the working directory accordingly.

Setting the working directory is essential for loading data files, saving output, and managing your R scripts effectively. It is important to set the working directory to ensure that R can access the necessary files and resources for your analysis. Below is the directory in my laptop. You will need to change it in your directory. If you want to work on this vis_1.qmd file in your RStudio, you can manually browse and select the desired directory (Using RStudio option above). The code with your selected working directory will appear in your consule. You can copy that code from R Consule and past to the chunk below, replacing my working directory with yours.

```{r}
#rm(list = ls())
setwd("/Users/namigabbasov/Library/Mobile Documents/com~apple~CloudDocs/Statistical training/R files/Rworkshop")
```

### Importing Data to R

We will work with both built-in datasets and imported data. There are several built-in datasets that come with the base R installation. These datasets cover a wide range of topics and are often used in examples and tutorials. You can import your data either from your computer or an online link. The code you use to import data depends on the type of your data source and format. For instance, if your data is csv format, you will use read.csv() function. You can also import the data by clicking "import" and choosing the right data format in ***Environment*** section of RStudio.

In this tutorial, we will import our dataset from a link to GitHub repository. All RStudio, data, and rendered html files are stored in [RWorkshop repository](https://github.com/UnitForDataScience/RWorkshop/tree/main) of our [UnitforDataScience](https://github.com/UnitForDataScience) GitHub. The dataset is structured in a country-year format, covering comprehensive information about all countries spanning the years from 1946 to 2021. Most of variables have been merged from Quality of Government(QoG) Standard Dataset. You can access to the [Codebook](https://www.qogdata.pol.gu.se/data/codebook_std_jan23.pdf) from QoG Institute.

```{r}
total<-read.csv("https://raw.githubusercontent.com/UnitForDataScience/RWorkshop/main/RWorkshop_data.csv")

#total<-read.csv("/Users/namigabbasov/Library/Mobile Documents/com~apple~CloudDocs/Statistical training/R files/Rworkshop/RWorkshop_data.csv") 
# This is from my laptop. 
#It won't work in your machine because your directory is different. 
#If you can't import the data from our GitHub repository, 
#you can just download it and import it manually from your RStudio: 
#Environment=>Import=>From Text(readr)=>Browse=>select where you have stored the data. 

```

### Install Required Packages

In R, packages are collections of functions, data sets, and documentation bundled together for specific purposes.

**Installing Packages:**

-   Before you can use a package, you need to install it. You can install packages from CRAN (Comprehensive R Archive Network). Cran is the primary repository for R packages. You can also install from other sources like GitHub.
-   To install a package from CRAN, use the **`install.packages()`** function, followed by the package name in quotes. For instance, **`install.packages(`**"tidyverse"**`)`**.
-   To install a package from GitHub, you can use the **`devtools`** package and its **`install_github()`** function. But first, you will neeed to install and load the **`devtools`** package, and then install the package from GitHub.
-   To see a list of all the packages installed, you can use the **`installed.packages()`** function.
-   If you no longer need a package, you can remove it from your R installation using the **`remove.packages()`** function.

**Loading Packages:**

-   Once a package is installed, you need to load it into your R session using the **`library()`** or **`require()`** function. Loading a package makes its functions available for use.
-   You can also use **`require()`** to load a package, which returns a logical value (**`TRUE`** if the package is available, **`FALSE`** if it is not).
-   You might need to update packages by running the **`update.packages()`** function. Over time, packages may receive updates to fix bugs or add new features. You might need to update packages if you get errors for no clear reason.

### Most Common File Types in RStudio

1.  **R Script (.R)**: most common file type used for writing R code. You can create, edit, and run R scripts in RStudio. You can create R Script from File=\>New File=\>R Script

2.  **R Markdown (.Rmd)**: R Markdown files allow you to mix R code, text, and formatting in a single document. You can create from You can create R Script from File=\>New File=\>R Markdown.

3.  **Quarto Document (qmd):** Quarto offers a comprehensive authoring framework tailored for data science. It is very effective in integrating your code, its outcomes, and your written explanations. Quarto documents ensure complete reproducibility and offer versatile output formats, including PDFs, Word documents, presentations, and more. Our R Workshop code files are prepared in this format.

    Quarto files are designed to serve three primary purposes:

    -   **Effective Communication:** They enable concise communication with decision-makers who prioritize conclusions over the technical details of the analysis.
    -   **Collaboration:** Quarto facilitates collaboration among data scientists, allowing them to delve into both the conclusions and the underlying code that led to those conclusions.
    -   **Data Science Environment:** Quarto serves as a dynamic workspace for data science, functioning as a contemporary digital lab notebook. Here, you can not only document your actions but also capture your thoughts and insights. Please, refer to [R for Data Science](https://r4ds.hadley.nz/quarto) Book for more info.

4.  **R Project (.Rproj)**: An R Project file is used to organize your work within RStudio. It helps manage your files, packages, and settings for a specific project.

5.  **HTML Files (.html)**: You can create, edit, and view HTML files in RStudio, which is useful for generating web-based reports and documentation.

6.  **PDF Files (.pdf)**: RStudio can generate PDF documents from R Markdown and Quarto files using packages like **`rmarkdown`** and **`knitr`**.

7.  **Shiny Apps (.R, .Rmd)**: If you are developing Shiny web applications in RStudio, you'll typically work with .R and .Rmd files.

8.  **Image Files**: **PNG, JPG, GIF (.png, .jpg, .gif)**: You can create and manipulate images using R packages like **`ggplot2`** and **`imager`**.

9.  **Data Files**:

    -   **CSV (.csv)**: Comma-separated values files are widely used for storing tabular data.

    -   **Excel (.xlsx, .xls)**: RStudio can read and write Excel files using packages like **`readxl`** and **`writexl`**.

    -   **R Data (.RData)**: You can save and load R objects, including data frames and variables, using .RData files.

    -   **Other Data Formats**: RStudio supports various other data formats such as JSON, XML, HDF5, and more, often with the help of specific packages.

Make sure you have installed and loaded the following packages.

```{r}
#install.packages("tidyverse")
#install.packages("stargazer")
#install.packages("grid")
#install.packages("fBasics")
#install.packages("extraGrid")
datasets::anscombe
library(grid)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(datasets)
library(stargazer)
library(palmerpenguins)
library(magrittr) 
library(ggthemes)
library(fBasics)
library(grid)
library(gridExtra)
library(psych)
```

## 1. Why should we care about visualization?

-   Caution Against Over-Reliance on Summary Statistics.

-   Similar summary statistics can exhibit very different patterns when plotted visually.

-   Detecting Outliers and Influential points

In this chunk, we will explore Anscombe's Quartet, which is a collection of four datasets that were created by the British statistician Francis Anscombe in 1973. These datasets have similar statistical properties, including means, variances, correlations, and linear regression parameters, but they exhibit dramatically different patterns when visualized. Anscombe created these datasets to emphasize the importance of graphical representation in exploring and understanding data.

Now let's look at some descriptive statistics. We will use anscombe dataset (Anscombe's Quartet), which is a built-in dataset from library(datasets) in R.

```{r}
sapply(anscombe[, 1:4], mean) #Mean of Xs
sapply(anscombe[, 1:4], sd)   #Standard Deviation of Xs
sapply(anscombe[, 1:4], var)  #Variance of Xs
sapply(anscombe[, 5:8], mean) #mean of Ys
sapply(anscombe[, 5:8], sd)   #Standard Deviation of Ys
summary(anscombe)             #Data summary
fBasics::basicStats(anscombe) #Basic Stats 
cor(anscombe)                 #Correlation
cor(anscombe, method = c("pearson"), use = "pairwise.complete.obs")
cor(anscombe[, c('x1', 'x2', 'x3', 'x4', 'y1', 'y2','y3', 'y4')])
```

Let's build linear regression models

```{r}
m1<-lm(y1~x1, data=anscombe)
m2<-lm(y2~x2, data=anscombe)
m3<-lm(y3~x3, data=anscombe)
m4<-lm(y4~x4, data=anscombe)
stargazer(m1, m2, m3, m4, type="text")
```

Now Let's plot and explore the relationship between these variables visually.

```{r}
p1<-ggplot(data=anscombe, aes(x=x1, y=y1))+
  geom_point(color="blue")+
  labs(x = "X1 variable", y = "Y1 variable",
       title = "First Dataset" ) +
  geom_smooth(method = "lm")

p2<-ggplot(data=anscombe, aes(x=x2, y=y2))+
  geom_point(color="red")+
  labs(x = "X2 variable", y = "Y2 variable",
       title = "Second Dataset" ) +
  geom_smooth(method = "lm")

p3<-ggplot(data=anscombe, aes(x=x3, y=y3))+
  geom_point(color="orange")+
  labs(x = "X3 variable", y = "Y4 variable",
       title = "Third Dataset" ) +
  geom_smooth(method = "lm")

p4<-ggplot(data=anscombe, aes(x=x4, y=y4))+
  geom_point(color="green")+
  labs(x = "X4 variable", y = "Y4 variable",
       title = "First Dataset" ) +
  geom_smooth(method = "lm")

grid.arrange(grobs = list(p1, p2, p3, p4), 
             ncol = 2, 
             top = "Anscombe's Quartet", padding = unit(0.5, "line"))

pairs.panels(anscombe)
```

## 2. What is ggplot: Basic Syntax

ggplot2 is a powerful data visualization package in R to create high-quality and customization visualizations. The "gg" in ggplot2 means ***"Grammar of Graphics".***

[**Key aspects of ggplot2**]{.underline}

1.  ggplot2 follows a layered grammer approach to building visualizations. Each layer represents a different aspect of the plot.
2.  Data Mapping aspect maps variables to aesthetics of the plot, such as x and y positions, color, shape, size, and more. It allows to establish complex visualizations.
3.  Geometric objects (aka geoms) represent the visual elements of plots. Geoms enable to make various forms of visualizations such scatterplot, lines, bars etc.
4.  Aesthetics and themes customize the aesthetics of plot elements, such as colors, shapes, and sizes, to convey information effectively.
5.  Ggplot2 supports faceting. Faceting means splitting the data into subsets and creating separate plots for each subset. Faceting is very useful to visualize data across different categories.
6.  The ggplot2 package has inspired the development of various extensions and packages that build upon its framework to create specialized and complex visualizations. Examples include **gganimate, ggmap, ggplotly, ggdist.**

```{r}
#basic syntax to get a plot
basic_plot<-total[c("cpi", "vdem_libdem")]        #first subset needed columns
basic_plot<-na.omit(basic_plot)                   #delete missing observations 

b1<-ggplot(                                       #calling ggplot
  data = basic_plot,                              #define data 
       mapping = aes(x = cpi, y = vdem_libdem))+  #identify x-axis and y-axis
  geom_point()                                    #choose geom type
b1


#Adding more features: Global Environment 
b2<-total |>
  filter(!is.na(cpi), 
         !is.na(vdem_libdem), 
         !is.na(regime_status_name)) |>
  ggplot(aes(x = cpi, y = vdem_libdem, color =regime_status_name)) +
  geom_point() +
  geom_smooth(method = "lm", se=F) +
  labs(
    title = "Relationship between Liberal Democracy and Corruption Perception Index",
    x = "Corruption Perception Index",
    y = "Liberal Democracy Index",
    color = "Regime Type"
  )
b2


#Local Environment: One line
b3<-total |>
  filter(!is.na(cpi), 
         !is.na(vdem_libdem), 
         !is.na(regime_status_name)) |> #choosing not missing observations 
  ggplot(aes(x = cpi, y = vdem_libdem)) +
  geom_point(aes(color =regime_status_name, shape=regime_status_name)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Relationship between Liberal Democracy and Corruption Perception Index",
    x = "Corruption Perception Index",
    y = "Liberal Democracy Index",
    color = "Regime Type",
    shape = "Regime Type"
  )
b3
```

## 3. Aesthetic mappings: Adding a Third Variable

```{r}
total20 <- total |> #subsetting data 
  filter(year %in% c(2017:2021))


#color aesthetic 
p1<-ggplot(data=total20 |> 
             filter(!is.na(cpi), 
                    !is.na(vdem_libdem), 
                    !is.na(regime_status_name)), mapping = aes(x=cpi, y=vdem_libdem, color=regime_status_name))+
  geom_point()+
  labs(title = "Relationship between Liberal Democracy and Corruption Perception Index", 
       x = "Liberal Democracy Index", 
       y = "Corruption Perception Index", 
       color="Regime Type")+
  theme_bw()
p1

#class aesthetic 
p2<-ggplot(data=total20 |> 
             filter(!is.na(cpi), 
                    !is.na(vdem_libdem), 
                    !is.na(regime_status_name)), 
           mapping = aes(x=cpi, y=vdem_libdem, shape=regime_status_name))+
  geom_point(color="black")+
  labs(title = "Relationship between Liberal Democracy and Transparency Perception Index", 
       x = "Liberal Democracy Index", 
       y = "Transparency Perception Index", 
       shape="Regime Type")+
  guides(shape="none")+
  theme_bw()
p2



#class and color aesthetic 
p3<-ggplot(data=total20 |> 
             filter(!is.na(cpi), 
                    !is.na(vdem_libdem), 
                    !is.na(regime_status_name)), 
           mapping = aes(x=cpi, y=vdem_libdem, shape=regime_status_name, color=regime_status_name))+
  geom_point()+
  labs(title = "Relationship between Liberal Democracy and Transparency Perception Index", 
       x = "Liberal Democracy Index", 
       y = "Transparency Perception Index", 
       shape="Regime Type", 
       color="Regime Type")+
  theme_bw()
p3

#size aesthetic
p4<-ggplot(data=total20 |> 
             filter(!is.na(cpi), 
                    !is.na(vdem_libdem), 
                    !is.na(gdp)), 
           mapping = aes(x=cpi, y=vdem_libdem, size=gdp))+
  geom_point(color="darkorange")+
  labs(title = "Relationship between Liberal Democracy and Transparency Perception Index", 
       x = "Liberal Democracy Index", 
       y = "Transparency Perception Index", 
       size="GDP per Capita")+
  theme_bw()
p4


#size aesthetic with a categorical variable(not recommended)- looks terrible? 
p5<-ggplot(data=total20 |> 
             filter(!is.na(cpi), 
                    !is.na(vdem_libdem), 
                    !is.na(regime_status_name)),
           mapping = aes(x=cpi, y=vdem_libdem, size=regime_status_name))+
  geom_point()+
  labs(title = "Relationship between Liberal Democracy and Corruption Perception Index", 
       x = "Liberal Democracy Index", 
       y = "Corruption Perception Index", 
       size="Regime Type")+
  theme_bw()
p5
```

## 4. Geom Objects: Different Types of Graphical Presentation

"Geom" (short for geometry) objects represent different types of graphical elements in a plot. They define how data points are displayed visually. The types of geoms include points, lines, bars, and more. Geom objects allow you to customize the visual representation of your data in a highly flexible and customizable manner. For example, geom_point() adds points to the plot(scatterplot), geom_line() adds lines. Here are some common Geom objects in ggplot2:

1)  Geom_Point: Displays individual data points (Scatterplot). Good for two continuous variables
2)  Geom_Line: Connects data points with lines, suitable for visualizing trends (Line graph).
3)  Geom_Bar: Creates bar charts by displaying data as vertical or horizontal bars (Bar plot).
4)  Geom_Histogram: Creates histograms to visualize the distribution of continuous data(Histogram).
5)  Geom_Boxplot: Represents the distribution of data through quartiles, medians, and outliers (Boxplot).
6)  Geom_Text: Adds text labels to specific data points on a plot.
7)  Geom_Abline: Adds reference lines to a plot.
8)  Geom_Ribbon: Creates ribbons that fill the area between two lines, used for visualizing confidence intervals.

### Histograms: Visualizing Distributions

A histogram is a graphical representation of the distribution of data. It provides insights into the frequency/count of data points falling within specific intervals or "bins" along the range of the data. You can add geom_histogram() layer to create histograms. You can also create histograms using the hist() function.

```{r}
total2018 <- total |> #subseting the data
  filter(year==2018)


#Let's explore distribution of state repression against sexual minorities
h1<-ggplot(total, aes(x =dv_pts, )) +
  geom_histogram(binwidth =1, na.rm = T, color="red")+
  labs(title="Distribution of State Repression against Sexual Minorities", 
       x="State Repression against Sexual Minorities")+
  theme_bw()
h1


#add probability density
h2<-ggplot(total2018, aes(x =dv_pts, after_stat(density))) +
  geom_histogram(binwidth =1, na.rm = T, color="red", fill="black")+
  labs(title="Distribution of State Repression against Sexual Minorities", 
       x="State Repression against Sexual Minorities", subtitle = "")+
  theme_bw()+
  geom_density(color = "green", linewidth = 1)
h2


#Let's explore distribution of Global Acceptance Index in 2018
h3<-total2018|>
ggplot(aes(x = gaiscore, after_stat(density))) +
  geom_histogram(binwidth =1, na.rm = T, color="red", fill="blue")+
  labs(x="Global Acceptance Index")+
  geom_density(color = "green", linewidth = 1)
h3



#Add a third variable using fill argument 
h4<-ggplot(total2018|> 
             filter(!is.na(gaiscore),
                    !is.na(regime_status_name)), 
           aes(x = gaiscore, fill=regime_status_name, na.rm = T)) +
  geom_histogram(binwidth =.7)+
  labs(x="Global Acceptance Index", fill="Regime Type", y="Frequency")+
  xlim(0, 10)+
  theme_bw()
h4

#Using facets 
h5<-ggplot(total2018|> 
             filter(!is.na(gaiscore),
                    !is.na(regime_status_name)), 
           aes(x = gaiscore, na.rm = T, color=regime_status_name)) +
  geom_histogram(binwidth =.7)+
  labs(x="Global Acceptance Index", y="Frequency", color="Regime Type")+
  facet_grid(vars(regime_status_name))+
  theme_bw()
h5


#Using facets 
h6<-ggplot(total2018|> 
             filter(!is.na(gdp),
                    !is.na(regime_status_name)), 
           aes(x =gdp, na.rm = T, color=regime_status_name, fil=regime_status_name )) +
  geom_histogram(binwidth =1000)+
  labs(x="GDP per capita", 
       y="Frequency", 
       color="Regime Type")+
  facet_grid(vars(regime_status_name))+
  theme_bw()+
  guides(color = "none")+
  theme(legend.position = "bottom")
h6
```

### Bar Plot

A bar plot (aka a bar chart or bar graph) is a common type of data visualization used to represent categorical data. It displays the frequency, count, or proportion of data points within different categories. Each category corresponds to a bar and the length of the bar is proportional to the value it represents.

```{r}

# The state repression against sexual minorities 
total$rep_text<-recode_factor(total$dv_pts, #first create new variable 
                              '0'="Advanced LGBTQ+ rights", 
                              '1'="No repression but failed to protect", 
                              '2'="Limited repression and non-protections", 
                              '3'="Illegal and occasional repression", 
                              '4'="Widespread repression",
                              '5'="Systemic repression")  

bar1<-ggplot(total |> 
             filter(!is.na(rep_text), 
                    !is.na(regime_status_name))
         , aes(x = rep_text, fill=regime_status_name)) +
  geom_bar() +
  labs(fill = "Politcal Regime", 
       x="Repression against Sexual Minorities") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
bar1
  


#Fragile State Index(FSI)
sfi<-total|> #Data transformation
  group_by(country) |>  #grouping the data by country
  summarise(m_sfi=mean(sfi, na.rm = T), n=n()) |> #the mean of FSI
  arrange(desc(m_sfi)) |> #arranging in descending order
  na.omit() |> #deleting missing observations 
  filter(m_sfi >10) #choosing rows with a higher fragile  index(>10). 

bar2<-sfi |> #visualize it using geom_bar
ggplot(aes(y=m_sfi, x=country))+
  geom_bar(stat = "identity")+  
  labs(title="Fragile State Index per Country",
       x="Countries", 
       y = "Fragile State Index", width = 0.1)+
  coord_flip()
bar2


col<-ggplot()+ #you can alternatively use geom_col 
  geom_col(mapping =aes(y=m_sfi, x=country), data = sfi, position = "stack")+
  labs(title="Fragile State Index per Country",
       x="Countries", 
       y = "Fragile State Index", width = 0.1)+
  coord_flip()
col
  


#Which countries repress sexual minorities? 
total$rep_sexmin<-total$arrest+
  total$imprison+
  total$torture+
  total$execution+
  total$disappear+
  total$extra_kill                                       #create a new variable

LGBT_rep <- total |>                                     # data transformation 
  group_by(country) |>                                   #grouping by country
  summarise(rep_m=mean(rep_sexmin, na.rm = T), n=n()) |>#mean repression
  na.omit()|>                                            #deleting NAs 
  filter(rep_m > 0)                                      #rows with > 0

bar4<-ggplot(LGBT_rep, aes(x =country, y =rep_m)) + 
  geom_bar(stat = "identity", color="blue") + 
  coord_flip()+ 
  labs(title="Countries Repressing Sexual Minorities",
       x="Countries", 
       y = "Level of Repression against Sexual Minorities", width = 0.1)
bar4
```

### Scatter Plot

A scatter plot is created to display individual data points as dots on a two-dimensional coordinate system. Each dot represents a single observation in the dataset. The position of a dot is determined by the values of two variables: the x-axis variable and the y-axis variable. Scatter plots are used to visualize the relationship/correlation between two continuous variables. They are useful to identify patterns, trends, and outliers in the data.Scatter plots can help answer these questions:

-   Is there a linear relationship between the two variables?

-   Are the variables positively or negatively correlated?

-   Are there any outliers that deviate from the general pattern?

-   Are there any clusters or patterns in the data points?

```{r}

#Human Development Index(HDI) vs Liberal Democracy Index 
s1<-ggplot(
  data = total |>
    filter(!is.na(undp_hdi), 
           !is.na(gaiscore), 
           !is.na(regime_status_name)),
  mapping = aes(x =undp_hdi, y =gaiscore)
) +
  geom_point(aes(color = regime_status_name, shape = regime_status_name)) +
  geom_smooth(method="lm") +
  labs(
    title = "Human Development Index vs Global Acceptance Index",
    x = "Human Development Index", 
    y = "Global Acceptance Index(of LGBTQ+ rights)",
    color = "Regime Types", 
    shape = "Regime Types"
  ) +
  scale_color_colorblind()
s1


#How about relationship between GDP per Capita and Global Acceptance Index. 
#Is GDP per capita a good measure of development? 
#Which authoritarian countries have higher GDP per capita 
#but relatively lower acceptance index? 
s2<-ggplot(
  data =total |> 
    filter(!is.na(gaiscore), 
           !is.na(gdp), 
           !is.na(regime_status_name)),
  mapping = aes(x = gdp, y = gaiscore)
) +
  geom_point(aes(color = regime_status_name, shape = regime_status_name)) +
  geom_smooth(method="lm") +
  labs(
    title = "Global Acceptance Index and GDP per Capita",
    subtitle = "by Political Regimes",
    x = "GDP per Capita", 
    y = "Global Acceptance Index(of LGBTQ+)",
    color = "Regime Types", 
    shape = "Regime Types"
  ) +
  scale_color_colorblind()
s2


#How about the Opposition to US-led Liberal World Order? Russia?  
s3<-ggplot(
  data = total |>
    filter(!is.na(IdealPointAll), 
           !is.na(gaiscore), 
           !is.na(regime_status_name)),
  mapping = aes(x =IdealPointAll, y =gaiscore)
) +
  geom_point(aes(color = regime_status_name, shape =regime_status_name)) +
  geom_smooth(method="lm") +
  labs(
    title = "Opposition to US-led Order vs Global Acceptance Index",
    subtitle = "",
    x = "Opposition to US-led Liberal World Order", 
    y = "Global Acceptance Index",
    color = "Regime Types", 
    shape = "Regime Types"
  ) +
  scale_color_colorblind()
s3


#Any parallels between Global Acceptance Index and Women Empowerment Index? 
gen_par<-total[c("gaiscore", "vdem_gender","regime_status_name" )] |>
  na.omit(gen_par)

s4<-ggplot(
  data = gen_par,
  mapping = aes(x =vdem_gender, y = gaiscore, fill=regime_status_name)
) +
  geom_point(aes(color =regime_status_name, shape =regime_status_name)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Women Political Empowerment vs Global Acceptance Index",
    subtitle = "",
    x = "Women political empowerment index", 
    y = "Global Acceptance Index(of LGBTQ+ rights)",
    color = "Regime Types", 
    shape = "Regime Types", 
    fill="Regime Types"
  ) +
  scale_color_colorblind()
s4 #Why do we get three lines? 
```

### Line Graph

A line graph, also known as a line plot or line chart, is a type of data visualization that displays data points as individual markers connected by straight lines. Line graphs are commonly used to represent trends and patterns over continuous or sequential data, such as time series data. In ggplot2, you can create line graphs using the geom_line() function.

```{r}
# A line graph based on fake data
year <- c(2020, 2021, 2022, 2023, 2024)
m_gdp_scaled <- c(1.1, 2.2, 3, 4, 4.2)
m_gai <- c(2, 3.2, 4.1, 3.2, 4)
m_hdi <- c(1.2, 2.3, 3, 4.1, 4.7)

# Create the line graph
mydata <- data.frame(year, m_gdp_scaled, m_gai, m_hdi)
l1<- ggplot(mydata, aes(x = year)) +
  geom_line(aes(y = m_gdp_scaled, 
                color = "GDP per Capita"), 
            linetype = "solid", size = 1) +
  geom_line(aes(y = m_gai, 
                color = "Global Acceptance Index"), 
            linetype = "dashed", size = 1) +
  geom_line(aes(y = m_hdi, 
                color = "Human Development Index"), 
            linetype = "dotted", size = 1) +
  labs(x = "Year", 
       y = "Value", 
       title = "Trends in GDP per Capita, Global Acceptance Index, and HDI") +
  scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
  scale_color_manual(values = c("GDP per Capita" = "blue", 
                                "Global Acceptance Index" = "red", 
                                "Human Development Index" = "green")) +
  theme_minimal() # Add labels to the lines manually
l1





#Economic indicators of selected countries over time: gdp of several countries. 
newdata <-filter(total,country %in% c('China','United Kingdom','United States','Japan'),
                  year > 1960)|>
  select("country", "polity", "year", "gle_gdp")
colors= c("#DA0000", "#304c00","#0872b9", "darkorange")

l2<-ggplot(newdata |>filter(!is.na(year), 
                            !is.na(gle_gdp), 
                            !is.na(country)), 
           aes(year, gle_gdp, color =  country)) + 
  geom_line(linewidth =1.2) +
  labs(title = "",
       subtitle = "",
       x = "Year",
       y = "",
       color = "") +
  scale_color_manual(values = colors)+
  ggthemes::theme_fivethirtyeight() + 
theme(
plot.title = element_text(size = 30), 
      axis.title.y = element_text(size = 20),
      axis.title.x = element_text(size = 20))
l2


#explore changes in certain variables over year. 
newdat<-total|>
  group_by(year)|>
  summarise(m_eco=mean(ffp_eco, na.rm = T), 
            m_sl=mean(ffp_sl, na.rm = T), 
            m_hr=mean(ffp_hr, na.rm = T),
            m_ued=mean(ffp_ued, na.rm = T) )|>
  na.omit()


l3<-ggplot(newdat, aes(x = year)) +
  geom_line(aes(y = m_eco, 
                color = "Economic Decline"), 
                linetype = "dotdash", size = 1) +
  geom_line(aes(y = m_sl, 
                color = "Legitimacy"), 
                linetype = "dashed", size = 1) +
  geom_line(aes(y = m_hr, 
                color = "Human Rights "), 
                linetype = "dotted", size = 1) +
  geom_line(aes(y = m_ued, 
                color = "Uneven Development"), 
                linetype = "solid",size=1) +
  labs(x = "Year", 
       y = "Value", 
       title = "Fragile State Index") +
  scale_linetype_manual(values = c("dotdash", "dashed", "dotted", "solid")) +
  scale_color_manual(values = c("Economic Decline" = "blue", 
                                "Legitimacy" = "red", 
                                "Human Rights" = "green", 
                                "Uneven Development" = "darkorange")) +
  theme_minimal() 
l3



#changes in a single country: United States
usa<-total |>
  select(c("vdem_libdem", 
           "vdem_gender",
           "vdem_exthftps", 
           "vdem_exembez",
           "vdem_academ", 
           "year", 
           "country"))|>
  filter(country=="United States") |>
  na.omit()


l4<-ggplot(usa, aes(x = year)) +
  geom_line(aes(y = vdem_libdem, 
                color = "Liberal Democracy Index"), 
                linetype = "solid", size = 1) +
  geom_line(aes(y = vdem_gender, 
                color = "Women Empowerment Index"), 
                linetype = "dashed", size = 1) +
  geom_line(aes(y = vdem_exthftps, 
                color = "Public Sector Theft"), 
                linetype = "dotted", size = 1) +
  geom_line(aes(y = vdem_exembez, 
                color = "Executive Embezzlement and Theft"), 
                linetype = "dotdash", size = 1) +
  geom_line(aes(y = vdem_academ, 
                color = "Academic Freedom Index"), 
                linetype = "longdash", size = 1) +
  labs(x = "Year", 
       y = "Value", 
       title = "Fragile State Index Indicators in the United States") +
  scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash", "longdash")) +
  scale_color_manual(values = c("Liberal Democracy Index" = "blue", 
                                "Women Empowerment Index" = "darkorange", 
                                "Public Sector Theft" = "red", 
                                "Executive Embezzlement and Theft" = "green", 
                                "Academic Freedom Index"="black")) +
  theme_minimal() 
l4
```

### Box Plot

A box plot(aka a box-and-whisker plot) displays summary statistics about the central tendency, spread, and skewness of the data. The box plot is useful for identifying outliers and comparing distributions across different categories or groups. The key components of box plot:

-   Box: The central box represents the interquartile range (IQR). It contains the middle 50% of the data. The top and bottom edges of the box represent the upper and lower quartiles (Q3 and Q1, respectively), while the line inside the box represents the median (Q2).

-   Whiskers: Lines extending from the box (whiskers) typically reach out to a maximum of 1.5 times the IQR. Data points beyond this range are often considered outliers and are plotted individually as dots.

-   Outliers: Data points that fall beyond the whiskers are considered outliers. They are plotted individually as dots.

```{r}
#A basic boxplot: Global Acceptance Index across Political Regimes
b1<-total |>
  filter(!is.na(regime_status_name), 
         !is.na(gaiscore)) |>
  ggplot(aes(x=regime_status_name, y=gaiscore, color=regime_status_name))+
  geom_boxplot()+
  scale_color_manual(values = c("red", "blue", "darkorange"))+
  labs(title="Global Acceptace Index across Political Regimes", 
       x="Regime Type", 
       y="Global Acceptance Index", 
       color="Regime Type")+
  theme_clean()
b1




#Make it a bit advanced 
b2<- total |>
  filter(!is.na(regime_status_name), 
         !is.na(gaiscore)) |>
  ggplot(aes(x = regime_status_name, y = gaiscore)) +
  geom_boxplot(aes(fill = regime_status_name), color = "black") + 
  geom_jitter(width = 0.2, alpha = 0.7) +                      # Add jittered points 
  labs(title = "Global Acceptance Index across Political Regimes", 
       x = "Regime Type", 
       y = "Global Acceptance Index", 
       fill="Regime") +
  theme_clean() +
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(gaiscore == max(gaiscore)), 
            aes(label = paste("Max:", round(gaiscore, 2)), 
                y = gaiscore + 0.2), vjust = -0.5) +           # Label max values
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(gaiscore == min(gaiscore)), 
            aes(label = paste("Min:", round(gaiscore, 2)), 
                y = gaiscore - 0.2), vjust = 1) +              # Label min values
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(gaiscore == median(gaiscore)), 
            aes(label = paste("Median:", round(gaiscore, 2)), 
                y = gaiscore), vjust = -0.5)                   # Label median values
b2



#Show all dots: relationship between corruption level and regime type. 
b3<-total |>
  filter(!is.na(regime_status_name), 
         !is.na(bci_bci), 
         year==2000) |>
  ggplot(aes(x=regime_status_name, y=bci_bci, fill=regime_status_name))+ 
  geom_boxplot()+
  labs(title="Corruption  across Political Regimes", 
       x="Regime Type", y="Corruption", 
       fill= "Regime Type")+
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5)+  #all dots 
  theme_bw()
b3



# flip it and remove the legend 
b4 <- total |>
  filter(!is.na(regime_status_name), 
         !is.na(bci_bci)) |>
  ggplot(aes(x = regime_status_name, y = bci_bci)) +
  geom_boxplot(aes(fill = regime_status_name), color = "black", outlier.shape = NA) + 
  guides(fill = "none")+                                        #removes legend 
  geom_jitter(width = 0.2, alpha = 0.7) +  
  labs(title="Corruption across Political Regimes", 
       x="Regime Type", 
       y="Corruption", 
       fill="regime") +
  theme_clean() + 
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(bci_bci == max(bci_bci)), 
            aes(label = paste("Max:", round(bci_bci, 2)), 
                y = bci_bci + 0.2), vjust = -0.5) +             #Max value
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(bci_bci == min(bci_bci)), 
            aes(label = paste("Min:", round(bci_bci, 2)), 
                y = bci_bci - 0.2), vjust = 1) +                #Min value
  geom_text(data = . %>% group_by(regime_status_name) %>%
              filter(bci_bci == median(bci_bci)), 
            aes(label = paste("Median:", round(bci_bci, 2)), 
                y = bci_bci), vjust = -0.5)+                    #Median
  coord_flip()
b4
```

### Faceting

Faceting in ggplot2 is a technique for creating multiple plots within a single larger plot. Each small plot displays a subset of the data, making it easier to compare different parts of the data or explore variations across categories or groups. There are two main faceting functions in ggplot2:

-   **`facet_wrap()`**: This function is used when you want to facet by a single variable. It arranges the small plots in rows or columns, with each row or column containing multiple plots.
-   **`facet_grid()`**: This function creates a grid of plots by specifying which variables define the rows and columns of the grid. You can also customize the arrangement of the panels as needed.

```{r}
#A basic faceting graph
f1 <- total |>
  filter(
    !is.na(gaiscore),
    !is.na(undp_hdi),
    !is.na(regime_status_name),
    year %in% 2000:2005
  ) |>
  ggplot(aes(x = undp_hdi, y = gaiscore)) +
  geom_point() +
  facet_wrap(~ regime_status_name) +
  labs(
    title = "Human Development Index vs Global Acceptance Index",
    x = "Human Development Index",
    y = "Global Acceptance Index"
  )
f1


#Add a third variable and other aesthetics 
f2 <- total |>
  filter(
    !is.na(gaiscore),
    !is.na(undp_hdi),
    !is.na(regime_status_name),
    !is.na(colonial),
    year %in% 2000:2005
  ) |>
  mutate(colonial= ifelse(colonial == 0, "No", "Yes")) |>
  ggplot(aes(x = undp_hdi, y = gaiscore, color = colonial)) +
  geom_point() +
  scale_color_manual(values = c("No" = "black", "Yes" = "blue")) +
  facet_wrap(~ regime_status_name) +
  labs(
    title = "Human Development Index vs Global Acceptance Index",
    x = "Human Development Index",
    y = "Global Acceptance Index",
    color = "Colonized"
  ) +
  theme_bw()
f2





#How about facet_grid? How is it different from wrap? 
f3 <- total |>
  filter(
    !is.na(gaiscore),
    !is.na(undp_hdi),
    !is.na(regime_status_name),
    !is.na(colonial),
    year %in% 2000:2005
  ) |>
  mutate(colonial= ifelse(colonial == 0, "No", "Yes")) |>
  ggplot(aes(x = undp_hdi, y = gaiscore, color = colonial)) +
  geom_point() +
  facet_grid(colonial~regime_status_name ) +        # Use two variables
  labs(
    title = "Human Development Index vs Global Acceptance Index",
    x = "Human Development Index",
    y = "Global Acceptance Index",
    color = "Colonized"
  ) +
  theme_bw()
f3


#Let's explore one more facet_grid with more panels 
gen_par <- total |>                              # data transformation
  select(vdem_partipdem, vdem_gender, regime_status_name, ht_colonial) |>
  mutate(
    colonial = recode_factor(
      ht_colonial,
      '0' = "Never colonized",
      '1' = "Dutch",
      '2' = "Spanish",
      '3' = "Italian",
      '4' = "US",
      '5' = "British",
      '6' = "French",
      '7' = "Portuguese",
      '8' = "Others",
      '9' = "British-French",
      '10' = "Others"
    )
  ) |>
  na.omit()

f4<-ggplot(                               
  data = gen_par,
  mapping = aes(x = vdem_partipdem, y = vdem_gender)
) +
  geom_point(aes(color = regime_status_name, shape = regime_status_name), na.rm = T)+
  geom_smooth(method = "lm") +
  labs(
    title = "Women Political Empowerment vs Participatory Democracy",
    x = "Participatory Democracy Index",
    y = "Women Political Empowerment Index",
    color = "Regime Types",
    shape = "Regime Types"
  ) +
  scale_color_colorblind() +
  facet_grid(colonial ~ regime_status_name)
f4





#now change grid to wrap and everything else 
gen_par <- total |>                                     
  select(vdem_partipdem, vdem_gender, regime_status_name, ht_colonial) |>
  mutate(colonial = recode_factor(ht_colonial,
      '0' = "Never colonized",
      '1' = "Dutch",
      '2' = "Spanish",
      '3' = "Italian",
      '4' = "US",
      '5' = "British",
      '6' = "French",
      '7' = "Portuguese",
      '8' = "Others",
      '9' = "British-French",
      '10' = "Others"
    )
  ) |>
  na.omit()

f5<-ggplot(                                             
  data = gen_par,
  mapping = aes(x = vdem_partipdem, y = vdem_gender)
) +
  geom_point(aes(color = regime_status_name, shape = regime_status_name), na.rm = TRUE) +
  geom_smooth(method = "lm") +
  labs(
    title = "Women Political Empowerment vs Participatory Democracy",
    x = "Participatory Democracy Index",
    y = "Women Political Empowerment Index",
    color = "Regime Types",
    shape = "Regime Types"
  ) +
  scale_color_colorblind() +
  guides(color="none", shape="none")+
  facet_wrap(colonial ~ regime_status_name)
f5
```

### Geom_Text

```{r}
#A basic geom_text
t1<-total|> 
  filter(!is.na(iso3c), 
         !is.na(gaiscore), 
         !is.na(undp_hdi), 
         year==2000, 
         !is.na(regime_status_name)) |>
  ggplot(aes(x=undp_hdi, y=gaiscore))+
  geom_point(color="darkorange")+
  geom_text(aes(label=iso3c), color="blue")+ # labels from 'iso3c' column
  labs(
    title = "Global Acceptance Index vs Human Development Index",
    subtitle = "by Regime Status",
    x = "Human Development Index (HDI)",
    y = "Global Acceptance Index")
t1
  

#let's make a customized plot
t2 <- total |>
  filter(
    !is.na(iso3c),
    !is.na(gaiscore),
    !is.na(undp_hdi),
    year==2000,
    !is.na(regime_status_name)
  ) |>
  ggplot(aes(x = undp_hdi, y = gaiscore)) +
  
  
  geom_point(                     # Create a scatterplot with  point aesthetics
    size = 1,                     # Adjust the size of the points
    alpha = 1,                    # Adjust the transparency of the points
    stroke = 1,                   # Add a border around points
    shape = 19                    # Use a solid circle as the point shape
  ) +
  geom_text(                      # Add labels for data points (ISO3 codes)
    aes(label = iso3c),
    nudge_x = 0.01,               # Adjust the horizontal position of labels
    nudge_y = -0.1,               # Adjust the vertical position of labels
    check_overlap = T,            # adjust label positions to avoid overlap
    size = 2.5                    # Adjust the size of the labels
  ) +
  labs(
    title = "Global Acceptance Index vs. Human Development Index (2000)",
    x = "Human Development Index",
    y = "Global Acceptance Index") +
  theme_classic()    
t2



#let's add a color aesthetics(regime type)
t3 <- total |>
  filter(
    !is.na(iso3c),
    !is.na(gaiscore),
    !is.na(undp_hdi),
    year==2000,
    !is.na(regime_status_name)
  ) |>
  ggplot(aes(x = undp_hdi, y = gaiscore, color = regime_status_name)) +
  geom_point(                 #Create a scatter-plot with point aesthetics
    size = 1,                 # Adjust the size of the points
    alpha = 1,                # Adjust the transparency of the points
    stroke = 1,               # Add a border around points
    shape = 19                # Use a solid circle as the point shape
  ) +
  geom_text(                  #Add labels for data points (ISO3 codes)
    aes(label = iso3c),
    nudge_x = 0.01,           # Adjust the horizontal position of labels
    nudge_y = -0.1,           # Adjust the vertical position of labels
    check_overlap = T,        # Adjust label positions to avoid overlap
    size = 2.5                # Adjust the size of the labels
  ) +
  labs(                       
    title = "Global Acceptance Index vs. Human Development Index(2000)",
    x = "Human Development Index",
    y = "Global Acceptance Index",
    color="Regime Types"
  ) +
  theme_clean()                           
t3
```

## 5. How Do I Know Which Code/Graph I Should Use?

\
Deciding which code or graph to use in **`ggplot2`** depends on the questions you want to answer, the message you want to convey with your visualization, and off course, the nature of your data. Here's a step-by-step guide to help you choose the right code and graph in **`ggplot2`**:

1.  **Define Your Objectives:** What insights do you want to convey to your audience?
    -   compare values
    -   show distributions
    -   highlight trends
    -   explore relationships
    -   or temporal and spatial relationships?
2.  **Understand Your Data:** What type of data are you working with. For instance, numeric, categorical, time series? Are there any patterns, relationships, or trends you want to explore or communicate?
3.  **Choose Right Aesthetics (aes):** x-axis, y-axis, color, size, shape, label that represent the variables you want to visualize.
4.  **Select Right Graph Type (Geom)**: Choose a graph type that best represents your data. For instance:
    -   Use bar charts for comparing categorical data.
    -   Use scatter plots to show relationships between two continuous variables.
    -   Use line charts for time series data.
5.  **Set Scales and Themes:** You can customize axis labels, titles, fonts, colors, and other visual elements using **`scale_`** and **`theme_`** functions.
6.  **Experiment and Iterate:**
    -   Always experiment with different geoms, aesthetics, and settings.
    -   Create multiple versions of your plot to see which one best conveys your message.
7.  **Practice and Learn:**
    -   Becoming proficient with **`ggplot2`** often requires practice and learning from experience.

    -   Explore the **`ggplot2`** documentation, online tutorials, and galleries of data visualizations for inspiration.

[***Remember that data visualization is both art and science. The choice of code and graph should align with your goals and effectively convey the insights you want to share with your audience.***]{.underline}

## 6. Further Resources

Learning and mastering **`ggplot2`** in R can greatly enhance your data visualization skills. Here are some valuable resources and steps to help you get started and become proficient with **`ggplot2`**:

1.  **Official Documentation:**

    -   The official **`ggplot2`** documentation is a comprehensive resource. Start with the [**ggplot2 reference website**](https://ggplot2.tidyverse.org/), which includes detailed documentation, examples, and references to related functions.

    -   Tidyverse offers a [**ggplot2 cheat sheet**](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf) that serves as a quick reference for creating different types of plots.

2.  **Books:**

    -   "[ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/)" by Hadley Wickham is the go-to resource. It provides a deep understanding of the package.
    -   "[R Graphics Cookbook](https://r-graphics.org/)" by Winston Chang offers practical solutions to common visualization challenges using **`ggplot2`**.
    -   "[R for Data Science](https://r4ds.hadley.nz/)" by Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund. One of the best books for R beginners.
    -   For more books, visit [BOOKDOWN Webpage](https://bookdown.org/)

3.  **Online Tutorials and Courses:**

    -   Websites like [**R Graphics Cookbook**](https://r-graphics.org/) and [**DataCamp**](https://www.datacamp.com/data-courses/r-courses) offer interactive courses on **`ggplot2`**.
    -   YouTube has numerous video tutorials explaining various aspects of **`ggplot2`**. Search for "ggplot2 tutorial" to find relevant videos.
    -   Many data science and R bloggers write informative articles and tutorials on **`ggplot2`**. Some popular blogs to explore include [R-Bloggers](https://www.r-bloggers.com/) and [Towards Data Science](https://towardsdatascience.com/tagged/r-programming) on Medium.

4.  **Online Communities:**

    -   Join online communities like the [**RStudio Community**](https://community.rstudio.com/) and [**Stack Overflow**](https://stackoverflow.com/questions/tagged/ggplot2) where you can ask questions, share your challenges, and learn from others.

5.  **GitHub Repositories:**

    -   Explore [GitHub repositories](https://github.com/trending/r) that contain **`ggplot2`** examples and projects. You can find code, datasets, and visualizations that may inspire you.
