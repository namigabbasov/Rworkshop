---
Title: "Getting Started with R"
author: "Namig Abbasov"
Format: html
Editor: visual
---

# Getting Started with R

Dr. Namig Abbasov

Digital Humanities Analyst at [**Data Science and Analytics**](https://lib.asu.edu/data), Arizona State University.\

Welcome to the exciting world of learning R! R stands as a versatile and potent programming language and statistical software. It is renowned for its prowess in data analysis, statistical modeling, and data visualization. Regardless of whether you're a novice or possess prior programming experience, R provides an abundance of tools and resources to empower you in the effective analysis and visualization of data. R is an open-source language and environment for statistical computing and graphics. For additional details, please refer to the [R project homepage](https://www.r-project.org/).

We will use R statistical software within RStudio. You will need to install both software.RStudio is an integrated development environment (IDE) specifically designed for working with the R programming language. It provides a user-friendly ***interface*** for writing, running, and managing R code. For additional details, please refer to the [Posit's homepage](https://posit.co/). RStudio company rebranded itself as Posit. RStudio is widely used in the R community for statistical modeling, data visualization, and scientific research. It is widely used for replication files of academic journal articles. For instance, you can get replication files from https://dataverse.harvard.edu/. Both R and RStudio are free.

### Installing R:

1.  Go to the [R Project website's download page](https://cran.rstudio.com/).
    -   For Macs, https://cran.r-project.org/bin/macosx/. Make sure whether your laptop is Apple silicon (M1/M2) Macs or Intel (chips) Macs. You can check it from "About This Mac" on your Mac.

    -   For Windows, https://cran.r-project.org/bin/windows/base/ or https://cran.r-project.org/

    -   For other operating systems, please, check out: https://cran.r-project.org/
2.  Download the R installer appropriate for your operating system and run the installer, following the installation instructions.

### Installing R Studio:

1.  Go to the [RStudio download page](https://www.rstudio.com/products/rstudio/download/)
2.  Scroll down and you will see "All Installers and Tarballs" Heading
3.  Choose the RStudio Desktop edition that is suitable for your operating system (Windows, macOS, or Linux).
4.  Download and run the RStudio installer and follow the installation instructions.
5.  Start RStudio: you can open it by clicking on the RStudio icon in your applications or by searching for "RStudio" in your system's search bar.

Key features of RStudio:

1.  **Script Editor/Source:** RStudio includes a script editor, making it easier to write, edit, and save R codes for future use.

2.  **Console:** The R console allows you to interactively execute R code and see the results immediately. You can use it for testing code snippets and exploring data interactively.

3.  **EnvironmentWorkspace/History:** You can view and manage your R workspace, enviroment, and command history within RStudio. It is a good practice to run rm(list = ls()) code to empty your environment before starting to work on your R file.

4.  **File/Plot/Package Management:** You can work with R scripts, data files, and other resources directly within RStudio. RStudio offers a dedicated plot pane for viewing and interacting with plots and visualizations generated by R. RStudio provides tools for managing R packages, including installation, updating, and loading packages. It also helps you keep track of which packages are currently active in your session.

### Set Working Directory

In R, you can set the working directory using the **`setwd()`** function. The working directory is the folder in your file system where R will look for and save files by default. Alternatively, you can set your directory either from RStudio menu or creating R projects.

1.  **Using RStudio:**

    -   Go to the "Session" menu at the top of the RStudio interface.
    -   Select "Set Working Directory."
    -   Choose "To Source File Location" to set the working directory to the location of the currently open R script (if applicable).
    -   Alternatively, you can choose "Choose Directory" to manually browse and select the desired directory.

2.  **Creating R Projects (Recommended):**

    In RStudio, it's a good practice to create R projects for your work. When you create an R project, the working directory is automatically set to the project's directory. To create an R project:

    -   Go to the "File" menu in RStudio.
    -   Select "New Project."
    -   Choose a project type (e.g., "New Directory" or "Existing Directory") and specify the project directory.
    -   Click "Create Project." RStudio will open the project and set the working directory accordingly.

Setting the working directory is essential for loading data files, saving output, and managing your R scripts effectively. It is important to set the working directory to ensure that R can access the necessary files and resources for your analysis. Below is the directory in my laptop. You will need to change it in your directory. If you want to work on this vis_1.qmd file in your RStudio, you can manually browse and select the desired directory (Using RStudio option above). The code with your selected working directory will appear in your consule. You can copy that code and past to the chunk below, replacing my working directory with yours.

```{r}
rm(list = ls())
setwd("/Users/namigabbasov/Library/Mobile Documents/com~apple~CloudDocs/Statistical training/R files/Rworkshop")
```

### Importing Data to R

We will work with both built-in datasets and imported data. There are several built-in datasets that come with the base R installation. These datasets cover a wide range of topics and are often used in examples and tutorials. You can import your data either from your computer or an online link. The code you use to import data depends on the type of your data source and format. For instance, if your data is csv format, you will use read.csv() function. You can also import the data by clicking "import" and choosing the right data format in ***Environment*** section of RStudio.

In our tutorials, we will import our dataset from a link to GitHub repository. All RStudio, data, and rendered html files are stored in [RWorkshop repository](https://github.com/UnitForDataScience/RWorkshop/tree/main) of our [UnitforDataScience](https://github.com/UnitForDataScience) GitHub. The dataset is structured in a country-year format, covering comprehensive information about all countries spanning the years from 1946 to 2021. Most of variables have been merged from Quality of Government(QoG) Standard Dataset. You can access to the [Codebook](https://www.qogdata.pol.gu.se/data/codebook_std_jan23.pdf) from QoG Institute.

```{r}
total<-read.csv("https://raw.githubusercontent.com/UnitForDataScience/RWorkshop/main/RWorkshop_data.csv")

#total<-read.csv("/Users/namigabbasov/Library/Mobile Documents/com~apple~CloudDocs/Statistical training/R files/Rworkshop/RWorkshop_data.csv") #This is an alternative import. This is a directory to my laptop. It won't work in your machine because your directory is different. If you can't import the data from our GitHub repository, you can just download it and import it manually from your RStudio: Environment=>Import DataSet=>From Text(readr)=>Browse=>select where you have downloaded/stored the data. 
```

### Install Required Packages

In R, packages are collections of functions, data sets, and documentation bundled together for specific purposes.

**Installing Packages:**

-   Before you can use a package, you need to install it. You can install packages from CRAN (Comprehensive R Archive Network), which is the primary repository for R packages, or from other sources like GitHub.
-   To install a package from CRAN, use the **`install.packages()`** function, followed by the package name in quotes.
-   To install a package from GitHub, you can use the **`devtools`** package and its **`install_github()`** function. First, install and load the **`devtools`** package, and then install the package from GitHub.
-   To see a list of all the packages installed on your system, you can use the **`installed.packages()`** function.
-   If you no longer need a package, you can remove it from your R installation using the **`remove.packages()`** function.

**Loading Packages:**

-   Once a package is installed, you need to load it into your R session using the **`library()`** or **`require()`** function. Loading a package makes its functions and data sets available for use.
-   You can also use **`require()`** to load a package, which returns a logical value (**`TRUE`** if the package is available, **`FALSE`** if it's not).
-   You might need to update packages by running the **`update.packages()`** function. Over time, packages may receive updates to fix bugs or add new features.

```{r}

library(ggplot2)
library(tidyverse)
library(dplyr)
library(datasets)
library(stargazer)
library(datasets)
datasets::anscombe
library(palmerpenguins)
library(magrittr) 
library(ggthemes)
```

### Most Common File Types in RStudio

1.  **R Script (.R)**: This is the most common file type used for writing R code. You can create, edit, and run R scripts in RStudio.

2.  **R Markdown (.Rmd)**: R Markdown files allow you to mix R code, text, and formatting in a single document. You can create dynamic reports and presentations using R Markdown.

3.  **Quarto Document (qmd):** Quarto offers a comprehensive authoring framework tailored for data science, seamlessly integrating your code, its outcomes, and your written explanations. Quarto documents ensure complete reproducibility and offer versatile output formats, including PDFs, Word documents, presentations, and more.

    Quarto files are designed to serve three primary purposes:

    -   **Effective Communication:** They enable concise communication with decision-makers who prioritize conclusions over the technical details of the analysis.
    -   **Collaboration:** Quarto facilitates collaboration among data scientists, allowing them to delve into both the conclusions and the underlying code that led to those conclusions.
    -   **Data Science Environment:** Quarto serves as a dynamic workspace for data science, functioning as a contemporary digital lab notebook. Here, you can not only document your actions but also capture your thoughts and insights. Please, refer to [R for Data Science](https://r4ds.hadley.nz/quarto) Book for more info.

4.  **R Project (.Rproj)**: An R Project file is used to organize your work within RStudio. It helps manage your files, packages, and settings for a specific project.

5.  **HTML Files (.html)**: You can create, edit, and view HTML files in RStudio, which is useful for generating web-based reports and documentation.

6.  **PDF Files (.pdf)**: RStudio can generate PDF documents from R Markdown and Quarto files and other sources using packages like **`rmarkdown`** and **`knitr`**.

7.  **Shiny Apps (.R, .Rmd)**: If you are developing Shiny web applications in RStudio, you'll typically work with .R and .Rmd files for server and UI components.

8.  **Image Files**: **PNG, JPG, GIF (.png, .jpg, .gif)**: You can create and manipulate images using R packages like **`ggplot2`** and **`imager`**.

9.  **Data Files**:

    -   **CSV (.csv)**: Comma-separated values files are commonly used for storing tabular data.

    -   **Excel (.xlsx, .xls)**: RStudio can read and write Excel files using packages like **`readxl`** and **`writexl`**.

    -   **R Data (.RData)**: You can save and load R objects, including data frames and variables, using .RData files.

    -   **Other Data Formats**: RStudio supports various other data formats such as JSON, XML, HDF5, and more, often with the help of specific packages.

### Basics of R Coding

-   Use R to make basic math calculations

```{r}
20+30          #addition
30-20          #subtraction 
100/14*35      #division and multiplication
```

-   Create new objects using the assignment operator `<-`:

```{r}
hello<-"Hello World"
add<-20+30 
```

-   Combine multiple elements into a vector using the **`c()`** function:

```{r}
num<-c(1, 2, 3, 4, 5,6, 7, 8, 9)
```

-   Apply basic arithmetic on vectors

```{r}
num*5 #applied to every element in the vector 
```
